// Code generated by hertz generator.

package api

import (
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/limiter"
	"summer/server/cmd/api/config"
	"summer/server/shared/consts"
	"summer/server/shared/middwares"
	"summer/server/shared/middwares/casbin"
)

func rootMw() []app.HandlerFunc {
	return []app.HandlerFunc{
		// use gzip mw
		gzip.Gzip(gzip.DefaultCompression, gzip.WithExcludedExtensions([]string{".jpg", ".mp4", ".png", ".log"})),
		// use limiter mw
		limiter.AdaptiveLimit(limiter.WithCPUThreshold(900)),
		middwares.Recovery(),
	}
}

func _apiMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _uploadMw() []app.HandlerFunc {
	return []app.HandlerFunc{
		middwares.JWTAuth(config.GlobalServerConfig.JWTInfo.SigningKey),
		casbin.MyCasbinAuth(consts.UserRole),
	}
}

func _downloadMw() []app.HandlerFunc {
	return []app.HandlerFunc{
		middwares.JWTAuth(config.GlobalServerConfig.JWTInfo.SigningKey),
		casbin.MyCasbinAuth(consts.UserRole),
	}
}

func _newtaskMw() []app.HandlerFunc {
	return []app.HandlerFunc{
		middwares.JWTAuth(config.GlobalServerConfig.JWTInfo.SigningKey),
		casbin.MyCasbinAuth(consts.UserRole),
	}
}

func _gettaskMw() []app.HandlerFunc {
	return []app.HandlerFunc{
		middwares.JWTAuth(config.GlobalServerConfig.JWTInfo.SigningKey),
		casbin.MyCasbinAuth(consts.UserRole),
	}
}

func _userMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _loginMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _login0Mw() []app.HandlerFunc {
	// your code...
	return nil
}

func _registerMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _register0Mw() []app.HandlerFunc {
	// your code...
	return nil
}
