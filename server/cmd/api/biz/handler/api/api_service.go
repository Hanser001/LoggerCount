// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "summer/server/cmd/api/biz/model/api"
)

// Register .
// @router /api/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RegisterResponse)

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /api/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.LoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// Upload .
// @router api/file [POST]
func Upload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UploadFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UploadFileResponse)

	c.JSON(consts.StatusOK, resp)
}

// Download .
// @router api/file [GET]
func Download(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DownloadFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DownloadFileResponse)

	c.JSON(consts.StatusOK, resp)
}

// NewTask .
// @router api/task [POST]
func NewTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.NewTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.NewTaskRequest)

	c.JSON(consts.StatusOK, resp)
}

// GetTask .
// @router api/task [GET]
func GetTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetTaskResponse)

	c.JSON(consts.StatusOK, resp)
}
