// Code generated by Kitex v0.5.2. DO NOT EDIT.

package taskservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	task "summer/server/shared/kitex_gen/task"
)

func serviceInfo() *kitex.ServiceInfo {
	return taskServiceServiceInfo
}

var taskServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TaskService"
	handlerType := (*task.TaskService)(nil)
	methods := map[string]kitex.MethodInfo{
		"NewTask":       kitex.NewMethodInfo(newTask_Handler, newTaskServiceNewTaskArgs, newTaskServiceNewTaskResult, false),
		"GetTaskStatus": kitex.NewMethodInfo(getTaskStatusHandler, newTaskServiceGetTaskStatusArgs, newTaskServiceGetTaskStatusResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "task",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func newTask_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*task.TaskServiceNewTaskArgs)
	realResult := result.(*task.TaskServiceNewTaskResult)
	success, err := handler.(task.TaskService).NewTask_(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceNewTaskArgs() interface{} {
	return task.NewTaskServiceNewTaskArgs()
}

func newTaskServiceNewTaskResult() interface{} {
	return task.NewTaskServiceNewTaskResult()
}

func getTaskStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*task.TaskServiceGetTaskStatusArgs)
	realResult := result.(*task.TaskServiceGetTaskStatusResult)
	success, err := handler.(task.TaskService).GetTaskStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceGetTaskStatusArgs() interface{} {
	return task.NewTaskServiceGetTaskStatusArgs()
}

func newTaskServiceGetTaskStatusResult() interface{} {
	return task.NewTaskServiceGetTaskStatusResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) NewTask_(ctx context.Context, req *task.NewTaskRequest_) (r *task.NewTaskResponse_, err error) {
	var _args task.TaskServiceNewTaskArgs
	_args.Req = req
	var _result task.TaskServiceNewTaskResult
	if err = p.c.Call(ctx, "NewTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTaskStatus(ctx context.Context, req *task.GetTaskStatusRequest) (r *task.GetTaskStatusResponse, err error) {
	var _args task.TaskServiceGetTaskStatusArgs
	_args.Req = req
	var _result task.TaskServiceGetTaskStatusResult
	if err = p.c.Call(ctx, "GetTaskStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
