// Code generated by thriftgo (0.2.11). DO NOT EDIT.

package errno

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Err int64

const (
	Err_Success             Err = 0
	Err_ParamsErr           Err = 1
	Err_ServiceErr          Err = 2
	Err_RPCUserErr          Err = 10000
	Err_UserServerErr       Err = 10001
	Err_UserAlreadyExistErr Err = 10002
	Err_UserNotFoundErr     Err = 10003
	Err_AuthorizeFailErr    Err = 10004
	Err_RPCFileErr          Err = 20000
	Err_FileServerErr       Err = 20001
)

func (p Err) String() string {
	switch p {
	case Err_Success:
		return "Success"
	case Err_ParamsErr:
		return "ParamsErr"
	case Err_ServiceErr:
		return "ServiceErr"
	case Err_RPCUserErr:
		return "RPCUserErr"
	case Err_UserServerErr:
		return "UserServerErr"
	case Err_UserAlreadyExistErr:
		return "UserAlreadyExistErr"
	case Err_UserNotFoundErr:
		return "UserNotFoundErr"
	case Err_AuthorizeFailErr:
		return "AuthorizeFailErr"
	case Err_RPCFileErr:
		return "RPCFileErr"
	case Err_FileServerErr:
		return "FileServerErr"
	}
	return "<UNSET>"
}

func ErrFromString(s string) (Err, error) {
	switch s {
	case "Success":
		return Err_Success, nil
	case "ParamsErr":
		return Err_ParamsErr, nil
	case "ServiceErr":
		return Err_ServiceErr, nil
	case "RPCUserErr":
		return Err_RPCUserErr, nil
	case "UserServerErr":
		return Err_UserServerErr, nil
	case "UserAlreadyExistErr":
		return Err_UserAlreadyExistErr, nil
	case "UserNotFoundErr":
		return Err_UserNotFoundErr, nil
	case "AuthorizeFailErr":
		return Err_AuthorizeFailErr, nil
	case "RPCFileErr":
		return Err_RPCFileErr, nil
	case "FileServerErr":
		return Err_FileServerErr, nil
	}
	return Err(0), fmt.Errorf("not a valid Err string")
}

func ErrPtr(v Err) *Err { return &v }
func (p *Err) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Err(result.Int64)
	return
}

func (p *Err) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
